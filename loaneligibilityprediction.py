# -*- coding: utf-8 -*-
"""LoanEligibilityPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1We5WHSu0htL9dupD9I7smFwiqJocbYBZ
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

dataset = pd.read_csv("loan-train.csv")

dataset.head()

"""# New Section"""

dataset.shape

dataset.info()

dataset.describe()

pd.crosstab(dataset['Credit_History'],dataset['Loan_Status'],  margins=True)

dataset.boxplot(column='ApplicantIncome')

dataset['ApplicantIncome'].hist(bins=20)

dataset['CoapplicantIncome'].hist(bins=20)

dataset.boxplot(column='ApplicantIncome',by='Education')

dataset.boxplot(column='LoanAmount')

dataset['LoanAmount'].hist(bins=20)

dataset['LoanAmount_log']=np.log(dataset['LoanAmount'])
dataset['LoanAmount_log'].hist(bins=20)

dataset.isnull().sum()

dataset['LoanAmount'].fillna(dataset['LoanAmount'].mode()[0],inplace=True)

dataset['Loan_Amount_Term'].fillna(dataset['Loan_Amount_Term'].mode()[0],inplace=True)

dataset['Credit_History'].fillna(dataset['Credit_History'].mode()[0],inplace=True)

dataset['LoanAmount_log'].fillna(dataset['LoanAmount_log'].mode()[0],inplace=True)

dataset['Gender'].fillna(dataset['Gender'].mode()[0],inplace=True)

dataset['Married'].fillna(dataset['Married'].mode()[0],inplace=True)

dataset['Dependents'].fillna(dataset['Dependents'].mode()[0],inplace=True)

dataset['Self_Employed'].fillna(dataset['Self_Employed'].mode()[0],inplace=True)

dataset.isnull().sum()

dataset['TotalIncome']= dataset['ApplicantIncome'] + dataset['CoapplicantIncome']
dataset['TotalIncome_log']=np.log(dataset['TotalIncome'])

dataset['TotalIncome_log'].hist(bins=20)

dataset.head()

from re import X
X = dataset.iloc[:,np.r_[1:5,9:11,13:15]].values
y = dataset.iloc[:,12].values

X

y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state =0)

print(x_train)

from sklearn.preprocessing import LabelEncoder
labelencoder_x = LabelEncoder()

for i in range(0,5):
  x_train[:,i]= labelencoder_x.fit_transform(x_train[:,i])

x_train[:,7]=labelencoder_x.fit_transform(x_train[:,7])

x_train

labelencoder_y = LabelEncoder()
y_train = labelencoder_y.fit_transform(y_train)

for i in range(0,5):
  x_test[:,i]= labelencoder_x.fit_transform(x_test[:,i])

x_test[:,7]=labelencoder_x.fit_transform(x_test[:,7])

labelencoder_y = LabelEncoder()
y_test = labelencoder_y.fit_transform(y_test)

x_test

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
x_train = ss.fit_transform(x_train)
x_test = ss.fit_transform(x_test)

from sklearn.tree import DecisionTreeClassifier
DTClassifier = DecisionTreeClassifier(criterion='entropy',random_state=0)
DTClassifier.fit(x_train,y_train)

y_pred = DTClassifier.predict(x_test)
y_pred

from sklearn import metrics
print('The accuracy of decision tree classifier is: ',metrics.accuracy_score(y_pred,y_test))

from sklearn.naive_bayes import GaussianNB
NBClassifier = GaussianNB()
NBClassifier.fit(x_train,y_train)

y_pred = NBClassifier.predict(x_test)
y_pred

print('The accuracy of Naive Bayes is: ',metrics.accuracy_score(y_pred,y_test))

testdata = pd.read_csv('loan-test.csv')

testdata.head()

testdata.info()

testdata.isnull().sum()

testdata['Gender'].fillna(testdata['Gender'].mode()[0],inplace = True)
testdata['Dependents'].fillna(testdata['Dependents'].mode()[0],inplace = True)
testdata['Self_Employed'].fillna(testdata['Self_Employed'].mode()[0],inplace = True)
testdata['Loan_Amount_Term'].fillna(testdata['Loan_Amount_Term'].mode()[0],inplace = True)
testdata['Credit_History'].fillna(testdata['Credit_History'].mode()[0],inplace = True)

testdata.isnull().sum()

testdata.boxplot(column='LoanAmount')

testdata.boxplot(column = 'ApplicantIncome')

testdata.LoanAmount = testdata.LoanAmount.fillna(testdata.LoanAmount.mean())

testdata['LoanAmount_log'] = np.log(testdata['LoanAmount'])

testdata.isnull().sum()

testdata['TotalIncome']= testdata['ApplicantIncome'] + testdata['CoapplicantIncome']
testdata['TotalIncome_log']=np.log(testdata['TotalIncome'])

testdata.head()

test = testdata.iloc[:,np.r_[1:5,9:11,13:15]].values

for i in range(0,5):
  test[:,i] = labelencoder_x.fit_transform(test[:,i])

test[:,7] = labelencoder_x.fit_transform(test[:,7])

test

test = ss.fit_transform(test)

pred = NBClassifier.predict(test)

pred

"""Here,1 represent that a applicant is eligible for loan and 0 for rejection."""

